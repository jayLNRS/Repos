workflow:
  rules:
    - if: '$CI_PIPELINE_SOURCE =~ /^schedule|pipeline|web$/'

image: 225237029829.dkr.ecr.eu-west-2.amazonaws.com/trunarrative/alpine:infra

stages:
  - test:1
  - test:2
  - test:3
  - test:4
  - test:5
  - test:6
  - test:7
  - test:8
  - test:9
  - test:10
  - test:11
  - cleanup

variables:
  CHANNEL: "performance-testing"
  JVM_ARGS: "-Dnashorn.args=--no-deprecation-warning"
  HEAP: "-Xms6g -Xmx6g"
  LOOPS: 1
  REQUESTS: 100
  # PAGES: "https://pages.trunarrative.cloud/p/${CI_PROJECT_PATH_SLUG}/${CI_JOB_ID}"
  # ENV: "pp"
  # THREADS: 1

.test:
  stage: test
  before_script:
    - aws secretsmanager get-secret-value --secret-id 'ppslack-config' --output json --region eu-west-2 | jq -r '.SecretString' >~/.config/ppslack
    - export TOKEN=$(aws secretsmanager get-secret-value --secret-id 'devops/performance_testing_token' --output json --region eu-west-2 | jq -r '.SecretString')
    - if [[ -n "$THREADS" ]]; then export _THREADS=$THREADS; fi
    - echo "$CHANNEL"
    - echo "$HEAP"
    - echo "$JVM_ARGS"
    - echo "$ENV"
    - echo "$JMX_FILE"
    - echo "$JOURNEY_ID"
    - echo "$STRATEGY_ID"
    - echo "$LOOPS"
    - echo "$THREADS"
    - echo "$_THREADS"
    - echo "$REQUESTS"
    - jmeter --version
  script:
    - >-
      ( jmeter -n -t "jmx/${JMX_FILE}.jmx" \
        -Jenv="${ENV}" \
        -Jtoken="${TOKEN}" \
        -Jthreads="${_THREADS}" \
        -Jloops="${LOOPS}" \
        -Jrequests="${REQUESTS}" \
        -Jjourney_id="${JOURNEY_ID}" \
        -Jstrategy_id="${STRATEGY_ID}" 2>&1 \
        || true ) | tee out.txt
    - summary=$(grep "^summary =.*in.*.*Avg:.*Min:.*Max:.*Err:.*" out.txt | tail -1)
    - 'echo "$summary" | ppslack -H -f "$GITLAB_USER_LOGIN" -t "$CHANNEL" -s "[${ENV^^}] Performance Test (JMX: ${JMX_FILE}, Threads: ${_THREADS}, Requests: ${REQUESTS}, <${CI_PIPELINE_URL}|Pipeline>, <${CI_JOB_URL}|Job>)" || true'
  timeout: 12 hours
  tags:
    - performance-testing
  rules:
    - if: '$THREADS != "" && $THREADS != null'
      when: never
    - when: on_success

test:
  extends: .test
  stage: test:1
  rules:
    - if: '$THREADS != "" && $THREADS != null'
      when: on_success
    - when: never

threads:1:
  extends: .test
  stage: test:1
  variables:
    _THREADS: 1

threads:10:
  extends: .test
  stage: test:2
  variables:
    _THREADS: 10

threads:20:
  extends: .test
  stage: test:3
  variables:
    _THREADS: 20

threads:30:
  extends: .test
  stage: test:4
  variables:
    _THREADS: 30

threads:40:
  extends: .test
  stage: test:5
  variables:
    _THREADS: 40

threads:50:
  extends: .test
  stage: test:6
  variables:
    _THREADS: 50

threads:60:
  extends: .test
  stage: test:7
  variables:
    _THREADS: 60

threads:70:
  extends: .test
  stage: test:8
  variables:
    _THREADS: 70

threads:80:
  extends: .test
  stage: test:9
  variables:
    _THREADS: 80

threads:90:
  extends: .test
  stage: test:10
  variables:
    _THREADS: 90

threads:100:
  extends: .test
  stage: test:11
  variables:
    _THREADS: 100

cleanup:
  stage: cleanup
  tags: [infra]
  variables:
    DB_HOST: "${NAME_PREFIX}-backend-db.trunarrative.cloud"
    DB_NAME: platform
    DB_USER: insight
  before_script:
    - aws secretsmanager get-secret-value --secret-id 'ppslack-config' --query SecretString --output text >~/.config/ppslack
    - aws secretsmanager get-secret-value --secret-id 'tf/assume_role' --query SecretString --output text >assume_role
    - source assume_role "$ENV"
    - export PGPASSWORD=$(aws secretsmanager get-secret-value --secret-id "tf/${NAME_PREFIX}/platform_database_password" --query SecretString --output text)
    - source assume_role -u
    - psql --version
    - vacuumdb --version
    - psql -h "$DB_HOST" -U "$DB_USER" -d "$DB_NAME" -l
  script:
    - export START=$(date +%s)
    - psql -q -h "$DB_HOST" -U "$DB_USER" -d "$DB_NAME" -v ON_ERROR_STOP=1 -v org_id="$ORG_ID" -f performance_data_clean.sql
    - vacuumdb -h "$DB_HOST" -U "$DB_USER" -d "$DB_NAME" -z -j 4 -e
    - export END=$(date +%s)
    - echo "*[${ENV^^}] BE DB cleaned and vacuumed in $(date -d@$((END-START)) -u +%H:%M:%S) (<${CI_PIPELINE_URL}|Pipeline>, <${CI_JOB_URL}|Job>)*" | ppslack -f "$GITLAB_USER_LOGIN" -t "$CHANNEL"
  rules:
    - if: $DB_CLEANUP == "yes"
      when: always
    - when: never
