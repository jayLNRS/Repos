<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="5.0" jmeter="5.6.2">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="PerformanceTest" enabled="true">
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <boolProp name="TestPlan.tearDown_on_shutdown">false</boolProp>
    </TestPlan>
    <hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Thread Group" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <stringProp name="LoopController.loops">${__P(loops, 1)}</stringProp>
          <boolProp name="LoopController.continue_forever">false</boolProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">${__P(threads, 1)}</stringProp>
        <stringProp name="ThreadGroup.ramp_time">${__P(period, 0)}</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration">30</stringProp>
        <stringProp name="ThreadGroup.delay">0</stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">false</boolProp>
        <boolProp name="ThreadGroup.delayedStart">false</boolProp>
      </ThreadGroup>
      <hashTree>
        <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="Loop Counter" enabled="true">
          <stringProp name="CounterConfig.start">1</stringProp>
          <stringProp name="CounterConfig.end"></stringProp>
          <stringProp name="CounterConfig.incr">1</stringProp>
          <stringProp name="CounterConfig.name">loop_counter</stringProp>
          <stringProp name="CounterConfig.format"></stringProp>
          <boolProp name="CounterConfig.per_user">true</boolProp>
        </CounterConfig>
        <hashTree/>
        <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="Thread Counter" enabled="true">
          <stringProp name="CounterConfig.start">1</stringProp>
          <stringProp name="CounterConfig.end"></stringProp>
          <stringProp name="CounterConfig.incr">1</stringProp>
          <stringProp name="CounterConfig.name">thread_counter</stringProp>
          <stringProp name="CounterConfig.format"></stringProp>
          <boolProp name="CounterConfig.per_user">false</boolProp>
        </CounterConfig>
        <hashTree/>
        <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="User Parameters" enabled="true">
          <collectionProp name="UserParameters.names">
            <stringProp name="-1562235024">thread_id</stringProp>
            <stringProp name="973187578">journey_id</stringProp>
            <stringProp name="100589">env</stringProp>
            <stringProp name="-1069606533">journey_id01</stringProp>
            <stringProp name="-1069606532">journey_id02</stringProp>
            <stringProp name="3057579">cmp1</stringProp>
            <stringProp name="3057580">cmp2</stringProp>
            <stringProp name="3057581">cmp3</stringProp>
            <stringProp name="3057582">cmp4</stringProp>
            <stringProp name="3057583">cmp5</stringProp>
          </collectionProp>
          <collectionProp name="UserParameters.thread_values">
            <collectionProp name="-785979272">
              <stringProp name="118040362">${__UUID()}</stringProp>
              <stringProp name="1555186313">${__P(journey_id,22448)}</stringProp>
              <stringProp name="2085912802">${__P(env,pp)}</stringProp>
              <stringProp name="1555187274">${__P(journey_id,22449)}</stringProp>
              <stringProp name="1555208416">${__P(journey_id,22450)}</stringProp>
              <stringProp name="1840770426">Limited</stringProp>
              <stringProp name="76732">Ltd</stringProp>
              <stringProp name="-1651459356">Partnership</stringProp>
              <stringProp name="-314173127">Sole Trader</stringProp>
              <stringProp name="80327">Plc</stringProp>
            </collectionProp>
          </collectionProp>
          <boolProp name="UserParameters.per_iteration">true</boolProp>
        </UserParameters>
        <hashTree/>
        <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
          <collectionProp name="HeaderManager.headers">
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">Content-type</stringProp>
              <stringProp name="Header.value">application/json</stringProp>
            </elementProp>
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">Authorization_token</stringProp>
              <stringProp name="Header.value">Basic ${__P(token)}</stringProp>
            </elementProp>
          </collectionProp>
        </HeaderManager>
        <hashTree/>
        <ConfigTestElement guiclass="HttpDefaultsGui" testclass="ConfigTestElement" testname="HTTP Request Defaults" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${env}.trunarrative.cloud</stringProp>
          <stringProp name="HTTPSampler.port">443</stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.path">/TruAPI/rest/TruRest/RunJourney</stringProp>
        </ConfigTestElement>
        <hashTree/>
        <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">true</boolProp>
          <stringProp name="LoopController.loops">${__P(requests,1)}</stringProp>
        </LoopController>
        <hashTree>
          <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="Counter" enabled="true">
            <stringProp name="CounterConfig.start">1</stringProp>
            <stringProp name="CounterConfig.end"></stringProp>
            <stringProp name="CounterConfig.incr">1</stringProp>
            <stringProp name="CounterConfig.name">counter</stringProp>
            <stringProp name="CounterConfig.format"></stringProp>
            <boolProp name="CounterConfig.per_user">true</boolProp>
            <boolProp name="CounterConfig.reset_on_tg_iteration">true</boolProp>
          </CounterConfig>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${loop_counter} Request ${thread_counter}:${counter}" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
	&quot;journeyId&quot;: ${journey_id},&#xd;
	&quot;customerReference&quot;: &quot;&quot;,&#xd;
	&quot;application&quot;: {&#xd;
		&quot;clientApplicationReference&quot;: &quot;&quot;,&#xd;
		&quot;country&quot;: &quot;GBR&quot;,&#xd;
		&quot;deviceId&quot;: &quot;&quot;,&#xd;
		&quot;clientDecision&quot;: &quot;&quot;,&#xd;
		&quot;clientDecisionReason&quot;: &quot;&quot;&#xd;
	},&#xd;
	&quot;company&quot;: [{&#xd;
		&quot;businessName&quot;: &quot;${__RandomString(15,abcdeghijklmnopqrstuvwxyz, bname)}&quot;,&#xd;
		&quot;businessRegNumber&quot;: &quot;${__RandomString(8,123456789,n)}&quot;,&#xd;
		&quot;companyTelephoneNumber&quot;: &quot;${__RandomString(11,123456789,)}&quot;,&#xd;
		&quot;companyType&quot;: &quot;${__RandomFromMultipleVars(cmp1|cmp2|cmp3|cmp4|cmp5,)}&quot;,&#xd;
		&quot;companyAddress&quot;: [{&#xd;
			&quot;addressLine1&quot;: &quot;${__RandomString(5,ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789)}&quot;,&#xd;
			&quot;addressLine2&quot;: &quot;${__RandomString(8,abcdeghijklmnopqrstuvwxyz)}&quot;,&#xd;
			&quot;zipPostcode&quot;: &quot;${__RandomString(5,ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789)}&quot;,&#xd;
			&quot;country&quot;: &quot;GBR&quot;&#xd;
		}],&#xd;
		&quot;emailAddress&quot;: &quot;${__RandomString(10,abcdefghij,)}@example.com&quot;,&#xd;
		&quot;finance&quot;: {},&#xd;
		&quot;website&quot;: &quot;www.${__RandomString(8,abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ)}.com&quot;,&#xd;
		&quot;percentShareholding&quot;: &quot;${__Random(1,100)}&quot;&#xd;
	}]&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">false</boolProp>
            <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
            <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
            <boolProp name="HTTPSampler.md5">false</boolProp>
            <intProp name="HTTPSampler.ipSourceType">0</intProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${loop_counter} Request ${thread_counter}:${counter}" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
	&quot;journeyId&quot;: ${journey_id01},&#xd;
	&quot;customerReference&quot;: &quot;&quot;,&#xd;
	&quot;application&quot;: {&#xd;
		&quot;clientApplicationReference&quot;: &quot;&quot;,&#xd;
		&quot;country&quot;: &quot;GBR&quot;,&#xd;
		&quot;deviceId&quot;: &quot;&quot;,&#xd;
		&quot;clientDecision&quot;: &quot;&quot;,&#xd;
		&quot;clientDecisionReason&quot;: &quot;&quot;&#xd;
	},&#xd;
	&quot;company&quot;: [{&#xd;
		&quot;businessName&quot;: &quot;${__RandomString(15,abcdeghijklmnopqrstuvwxyz, bname)}&quot;,&#xd;
		&quot;businessRegNumber&quot;: &quot;${__RandomString(8,123456789,n)}&quot;,&#xd;
		&quot;companyTelephoneNumber&quot;: &quot;${__RandomString(11,123456789,)}&quot;,&#xd;
		&quot;companyType&quot;: &quot;${__RandomFromMultipleVars(cmp1|cmp2|cmp3|cmp4|cmp5,)}&quot;,&#xd;
		&quot;companyAddress&quot;: [{&#xd;
			&quot;addressLine1&quot;: &quot;${__RandomString(5,ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789)}&quot;,&#xd;
			&quot;addressLine2&quot;: &quot;${__RandomString(8,abcdeghijklmnopqrstuvwxyz)}&quot;,&#xd;
			&quot;zipPostcode&quot;: &quot;${__RandomString(5,ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789)}&quot;,&#xd;
			&quot;country&quot;: &quot;GBR&quot;&#xd;
		}],&#xd;
		&quot;emailAddress&quot;: &quot;${__RandomString(10,abcdefghij,)}@example.com&quot;,&#xd;
		&quot;finance&quot;: {&#xd;
&#xd;
		},&#xd;
		&quot;website&quot;: &quot;www.${__RandomString(8,abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ)}.com&quot;,&#xd;
		&quot;percentShareholding&quot;: &quot;${__Random(1,100)}&quot;&#xd;
	}]&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">false</boolProp>
            <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
            <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
            <boolProp name="HTTPSampler.md5">false</boolProp>
            <intProp name="HTTPSampler.ipSourceType">0</intProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${loop_counter} Request ${thread_counter}:${counter}" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
	&quot;journeyId&quot;: ${journey_id02},&#xd;
	&quot;customerReference&quot;: &quot;&quot;,&#xd;
	&quot;application&quot;: {&#xd;
		&quot;clientApplicationReference&quot;: &quot;&quot;,&#xd;
		&quot;country&quot;: &quot;GBR&quot;,&#xd;
		&quot;deviceId&quot;: &quot;&quot;,&#xd;
		&quot;clientDecision&quot;: &quot;&quot;,&#xd;
		&quot;clientDecisionReason&quot;: &quot;&quot;&#xd;
	},&#xd;
	&quot;company&quot;: [{&#xd;
		&quot;businessName&quot;: &quot;${__RandomString(15,abcdeghijklmnopqrstuvwxyz, bname)}&quot;,&#xd;
		&quot;businessRegNumber&quot;: &quot;${__RandomString(8,123456789,n)}&quot;,&#xd;
		&quot;companyTelephoneNumber&quot;: &quot;${__RandomString(11,123456789,)}&quot;,&#xd;
		&quot;companyType&quot;: &quot;${__RandomFromMultipleVars(cmp1|cmp2|cmp3|cmp4|cmp5,)}&quot;,&#xd;
		&quot;companyAddress&quot;: [{&#xd;
			&quot;addressLine1&quot;: &quot;${__RandomString(5,ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789)}&quot;,&#xd;
			&quot;addressLine2&quot;: &quot;${__RandomString(8,abcdeghijklmnopqrstuvwxyz)}&quot;,&#xd;
			&quot;zipPostcode&quot;: &quot;${__RandomString(5,ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789)}&quot;,&#xd;
			&quot;country&quot;: &quot;GBR&quot;&#xd;
		}],&#xd;
		&quot;emailAddress&quot;: &quot;${__RandomString(10,abcdefghij,)}@example.com&quot;,&#xd;
		&quot;finance&quot;: {&#xd;
&#xd;
		},&#xd;
		&quot;website&quot;: &quot;www.${__RandomString(8,abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ)}.com&quot;,&#xd;
		&quot;percentShareholding&quot;: &quot;${__Random(1,100)}&quot;&#xd;
	}]&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">false</boolProp>
            <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
            <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
            <boolProp name="HTTPSampler.md5">false</boolProp>
            <intProp name="HTTPSampler.ipSourceType">0</intProp>
          </HTTPSamplerProxy>
          <hashTree/>
        </hashTree>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="false">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
        <ResultCollector guiclass="SummaryReport" testclass="ResultCollector" testname="Summary Report" enabled="false">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
        <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug Sampler" enabled="true">
          <boolProp name="displayJMeterProperties">false</boolProp>
          <boolProp name="displayJMeterVariables">true</boolProp>
          <boolProp name="displaySystemProperties">false</boolProp>
        </DebugSampler>
        <hashTree/>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
        <ResultCollector guiclass="SummaryReport" testclass="ResultCollector" testname="Summary Report" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
